// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Users {
  id               Int                @id @default(autoincrement())
  provider         String             @default("email/phone")
  img_thumbnail    String?
  backbanner       String?            @default("")
  first_name       String
  last_name        String
  email            String             @unique
  phone_num        String?
  password         String
  about            String?
  otp              Int                @default(0)
  verified         Boolean            @default(false)
  admin            Boolean            @default(false)
  created_at       DateTime           @default(now())
  Course           Course[]
  Participants     Participants[]
  Gift             Gift[]
  Suggest          Suggest[]
  Reactions        Reactions[]
  Classroom        Classroom?         @relation(fields: [classroom_id], references: [id])
  classroom_id     Int?
  updated_at       DateTime           @default(now())
  Classroom_Course Classroom_Course[]
  Friends          Friends[]
  Friends_Peer     Friends_Peer[]
  Comments         Comments[]
  CommentRecatcion CommentReaction[]
  userInfo User_Info[] // Define the back relation field in the Users model
  Classes  Class_V[]
  Completed Completed_Class[]
  Courses  Course_V[]
  Completed_Course Completed_Course[]
  carts   Cart[]   
  wishlist Wishlist[]
  Live_Streaming Live_Streaming[]
  Public_Post   Public_Post[]
  bookmark       Book_mark_Post[]
  liked          Liked_Post[]
  classrooms   Classroom_V2[] @relation(name: "UsersRelation")
  adminClasses Classroom_V2[] @relation(name: "AdminRelation")
} 

model User_Info {
  id               Int      @id @default(autoincrement())
  user             Users?   @relation(fields: [user_id], references: [id])
  user_id          Int
  whatBrings       String?
  currentIndustry  String?
  interestedTags   String[]
  heardBy          String?
  skilss           String[]   @default([])
  location         String     @default("")
  dob              String?
  languages        String[]
  education        String?
  currentCompany   String?
  awards           Json?    // Use Json for storing an array of objects
  flink           String?
  xlink           String?
  tubelink        String?
  linkedin        String?
  headline        String?
}

model Public_Post {
  id               Int                @id @default(autoincrement())
  user             Users?             @relation(fields: [user_id], references: [id])
  user_id          Int
  caption          String?
  images           String[]           @default([])
  videos           String[]           @default([])
  private          Boolean            @default(false)
  bookmark         Book_mark_Post[]
  liked            Liked_Post[]
  created_at       DateTime           @default(now())
  deleted          Boolean            @default(false)
}


model Live_Streaming {
  id               Int      @id @default(autoincrement())
  user             Users?   @relation(fields: [user_id], references: [id])
  user_id          Int
  title            String
  thumbnail        String
  finished         Boolean            @default(false)
  live             Boolean            @default(false)
  streamStartedAt  DateTime?
  streamEndedAt    DateTime?
  highestViewCount Int?
  liveViewCount    Int?
  tags             String[]
}


model Cart {
   id        Int       @id @default(autoincrement())
  user      Users     @relation(fields: [user_id], references: [id])
  user_id   Int       @unique
  classes   Class_V[] @relation("ClassCart")
  courses   Course_V[]
}





model Wishlist {
   id        Int       @id @default(autoincrement())
  user      Users     @relation(fields: [user_id], references: [id])
  user_id   Int       @unique
  classes   Class_V[] @relation("ClassWishlist")
  courses   Course_V[]
}

model Liked_Post {
   id        Int       @id @default(autoincrement())
  user      Users     @relation(fields: [user_id], references: [id])
  user_id   Int       @unique
  postId    Public_Post[]
}

model Book_mark_Post {
   id        Int       @id @default(autoincrement())
  user      Users     @relation(fields: [user_id], references: [id])
  user_id   Int       @unique
  postId    Public_Post[]
}

model Class_V {
  id               Int      @id @default(autoincrement())
  languageOfClass String? 
  user             Users?   @relation(fields: [trainer_id], references: [id])
  verified          Boolean       @default(false) 
  trainer_id          Int
  date  Json?
  title String? 
  description String? 
  trainerBio String? 
  classStructure String? 
  studentsWho String? 
  requirements String? 
  studentLim String? 
  price String? 
  currency String? 
  accN String? 
  bankN String? 
  holderN String? 
  accTpe String? 
  ifsc String? 
  img Json?
  users             Json?
   free             Boolean  @default(false)
  carts             Cart[]   @relation("ClassCart")
  wishlist          Wishlist[] @relation("ClassWishlist")

}


model Course_V {
  id               Int       @id @default(autoincrement())
  languageOfClass  String?
  user             Users?    @relation(fields: [trainer_id], references: [id])
  verified         Boolean   @default(false)
  trainer_id       Int
  date             Json?
  title            String?
  description      String?
  trainerBio       String?
  classStructure   Json?
  afterclassyouwillbe String?
  studentsWho      String?
  requirements     String?
  studentLim       String?
  price            String?
  currency         String?
  accN             String?
  bankN            String?
  holderN          String?
  accTpe           String?
  ifsc             String?
  img              Json?
  free             Boolean   @default(false)
  carts            Cart[]
  wishlist         Wishlist[]
}

model Classroom_V2 {
  id          Int      @id @default(autoincrement())
  adminId     Int
  title       String
  industry    String
  bio         String
  city        String
  state       String
  logo        String
  admin       Users?     @relation(name: "AdminRelation", fields: [adminId], references: [id])
  email_type  String    @unique
  planid      Int
  iDU         Boolean
  adminPass   String      @default("pass")
  users       Users[]   @relation(name: "UsersRelation")
  joinees     Json?
}

model ClassroomUser_V2 {
  id          Int      @id @default(autoincrement())
  ClassroomId Int?
  email_id    String
  password    String
  first_name  String
  last_name   String  
  admin       Boolean            @default(false)
  img_thumbnail    String?
  phone_number String?
}

model Classroom_Session_V2 {
  id          Int      @id @default(autoincrement())
  ClassroomId Int    
  languageOfClass String? 
  date  Json?   
  title String? 
  description String? 
  trainerBio String? 
  sessionStructure String? 
  studentsWho String? 
  requirements String?
  trainerMailId String? 
  img Json?
}



model Completed_Course {
  id               Int       @id @default(autoincrement())
  languageOfClass  String?
  user             Users?    @relation(fields: [trainer_id], references: [id])
  verified         Boolean   @default(false)
  trainer_id       Int
  date             Json?
  title            String?
  description      String?
  trainerBio       String?
  classStructure   Json?
  afterclassyouwillbe String?
  studentsWho      String?
  requirements     String?
  studentLim       String?
  price            String?
  currency         String?
  accN             String?
  bankN            String?
  holderN          String?
  accTpe           String?
  ifsc             String?
  upi              String?
  img              Json?
  free             Boolean   @default(false)
}

model Completed_Class {
  id               Int      @id @default(autoincrement())
  languageOfClass String? 
  user             Users?   @relation(fields: [trainer_id], references: [id])
  trainer_id          Int
  date  Json?
  title String? 
  description String? 
  trainerBio String? 
  classStructure String? 
  studentsWho String? 
  requirements String? 
  studentLim String? 
  price String? 
  currency String? 
  accN String? 
  bankN String? 
  holderN String? 
  accTpe String? 
  ifsc String? 
  upi String? 
  img Json?
  free Boolean       @default(false)
}

model Classroom {
  id               Int                @id @default(autoincrement())
  logo             String?
  host             Int?
  title            String
  description      String?
  Classroom_Course Classroom_Course[]
  email_type       String             @unique
  Users            Users[]
  updated_at       DateTime           @default(now())
}

model Classroom_Course {
  id           Int           @id @default(autoincrement())
  completion   Boolean       @default(false)
  title        String
  description  String?
  host_details Classroom     @relation(fields: [host], references: [id])
  host         Int
  creator_d    Users?        @relation(fields: [creator], references: [id])
  creator      Int?
  images       String[]
  hosted       Boolean       @default(false)
  Classes      Classes[]
  link         String?
  dolphin      Json?
  // class_structure String? //
  // structure       Json?
  Vid_Classes  Vid_Classes[]
  // methodology     Json?
  // content         Json?
  requirements Json?
  // Participants    Participants[]
  // Gift            Gift[]
  // Suggest         Suggest[]
  Reactions    Reactions[]
  // CommentReaction CommentRecatcion[]
}

model Course {
  id              Int            @id @default(autoincrement())
  completion      Boolean        @default(false)
  readmore        Boolean        @default(false)
  title           String
  price           String?
  description     String
  host_details    Users          @relation(fields: [host], references: [id])
  host            Int
  max_paticipants Int //
  images          String[]
  hosted          Boolean        @default(false)
  duration_type   String? //
  Classes         Classes[]
  link            String?
  dolphin         Json?
  class_structure String? //
  structure       Json?
  Vid_Classes     Vid_Classes[]
  methodology     Json?
  content         Json?
  requirements    Json?
  Participants    Participants[]
  Gift            Gift[]
  Suggest         Suggest[]
  Reactions       Reactions[]
  Comments        Comments[]
}

model Classes {
  id                  Int               @id @default(autoincrement())
  title               String?
  date                String ///*I have to get the date time attached in formal dates
  over                Boolean           @default(false)
  duration            String
  time                String ///*Then this field should not be there
  description         String?
  course              Course?           @relation(fields: [course_id], references: [id])
  course_id           Int?
  fee                 String?
  Classroom_Course    Classroom_Course? @relation(fields: [classroom_course_id], references: [id])
  classroom_course_id Int?
}

model Vid_Classes {
  id                  Int               @id @default(autoincrement())
  name                String
  course              Course?           @relation(fields: [course_id], references: [id])
  course_id           Int?
  Classroom_Course    Classroom_Course? @relation(fields: [classroom_course_id], references: [id])
  classroom_course_id Int?
}

//A user will only be part of participant when paid is successfully verified.
model Participants {
  id              Int      @id @default(autoincrement())
  course          Course   @relation(fields: [course_id], references: [id])
  course_id       Int
  participant     Users    @relation(fields: [participant_id], references: [id])
  participant_id  Int
  suggested_parti Suggest?
  gifted_parti    Gift?
}

model Gift {
  id             Int          @id @default(autoincrement())
  gifted_by      Int
  gifted         Users        @relation(fields: [email_id], references: [email])
  email_id       String
  course         Course       @relation(fields: [course_id], references: [id])
  course_id      Int
  paticipant_d   Participants @relation(fields: [participant_id], references: [id])
  participant_id Int          @unique
}

model Suggest {
  id             Int           @id @default(autoincrement())
  suggested_by   Int
  suggested      Users         @relation(fields: [email_id], references: [email])
  email_id       String
  course         Course        @relation(fields: [course_id], references: [id])
  course_id      Int
  approved_parti Participants? @relation(fields: [participant_id], references: [id])
  participant_id Int?          @unique
}

model Reactions {
  id                  Int               @id @default(autoincrement())
  course_id           Int?
  courses             Course?           @relation(fields: [course_id], references: [id])
  reactor_id          Int
  reactor             Users             @relation(fields: [reactor_id], references: [id])
  heartful            Int               @default(1)
  Classroom_Course    Classroom_Course? @relation(fields: [classroom_course_id], references: [id])
  classroom_course_id Int?
}

model Friends {
  id           Int            @id @default(autoincrement())
  accepted     Boolean        @default(false)
  friend_id    Int
  my_id        Int
  friend       Users          @relation(fields: [friend_id], references: [id])
  created_at   DateTime       @default(now())
  Friends_Peer Friends_Peer[]
  // Comments Comments[]
}

model Friends_Peer {
  id           Int     @id @default(autoincrement())
  my_id        Int
  peer_id      Int
  my_details   Users   @relation(fields: [my_id], references: [id])
  connect_frnd Friends @relation(fields: [peer_id], references: [id])
}

model Comments {
  id               Int               @id @default(autoincrement())
  post_id          Int?              @default(0)
  post_details     Course?           @relation(fields: [post_id], references: [id])
  user_id          Int               @default(0)
  user             Users             @relation(fields: [user_id], references: [id])
  comment_body     String            @default("")
  reply            Boolean           @default(false)
  reply_to         Int               @default(0)
  edited           Boolean           @default(false)
  CommentRecatcion CommentReaction[]
} 

model CommentReaction {
  id               Int               @id @default(autoincrement())
  user_id          Int
  user             Users             @relation(fields: [user_id], references: [id])
  react_to         Int
  react            Comments             @relation(fields: [react_to], references: [id])
}

model Admin {
   id               Int               @id @default(autoincrement())
   first_name       String?             
   last_name        String?
   email            String             @unique
   phone_num        String?
   password         String?
   joined_at        DateTime           @default(now())  
   last_active_at        DateTime?
   last_deactive_at        DateTime?
   superadmin       Boolean           @default(false)
}


model Chat_rooms {
  id                String     @id @default(cuid()) @map("_id") // Unique identifier, equivalent to ObjectId
  type              ChatType   // Either 'private' or 'group'
  participants      Int[]      // Array of participant user IDs
  group_name        String?    // Nullable field for group chats
  group_image       String?    // Optional group image (URL)
  adminId           Int?       // Foreign key to User for group admin
  last_message      String?    // Preview of the last message
  last_message_time DateTime?  // Timestamp of the last message
  created_at        DateTime   @default(now())
  on_call           Boolean    @default(false)
}

enum ChatType {
  private
  group
}


model MessageRequest {
  id        Int       @id @default(autoincrement())
  senderId  Int
  receiverId Int
  message   String
  timestamp DateTime  @default(now())
  status    Status    @default(PENDING)
  viewed    Boolean   @default(false)
  @@unique([senderId, receiverId]) // Ensures only one request between the same sender and receiver
}

enum Status {
  PENDING
  ACCEPTED
  REJECTED
}

model Follower {
  id         Int   @id @default(autoincrement())
  followerId Int
  followingId Int
}



model Message {
  id          Int   @id @default(autoincrement()) 
  senderId    Int      // User ID of the sender
  chatRoomId  String   // Foreign key to the chat room
  content     String   // Message content
  timestamp   DateTime @default(now()) // Time the message was sent
}


model Connections {
  id          Int   @id @default(autoincrement()) 
  ownerId     Int
  followers   Int[]
  following   Int[]
}

model KeepAlive {
  id        Int  @id @default(autoincrement()) 
  userId    Int  @unique
  isAlive   Boolean @default(false)
  updatedAt DateTime @updatedAt
}

model Notification {
  id          Int   @id @default(autoincrement()) // Unique identifier
  userId      String              // User receiving the notification
  title       String                         // Notification title
  description String                         // Notification description
  img         String?                        // Optional image URL

  status      NotificationStatus @default(WAITING) // Notification status
  sentAt      DateTime?                         // When the notification was sent
  createdAt   DateTime   @default(now())        // When the notification was created
  updatedAt   DateTime   @updatedAt             // Auto-updates on any change
}

enum NotificationStatus {
  WAITING  // Notification is created but not sent yet
  SENT     // Notification has been sent
  READ     // User has seen the notification
}

